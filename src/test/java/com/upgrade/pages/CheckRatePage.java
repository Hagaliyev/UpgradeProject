package com.upgrade.pages;

import com.github.javafaker.Faker;
import com.upgrade.utils.CustomMethods;
import com.upgrade.utils.Driver;
import lombok.Getter;
import lombok.Setter;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import java.util.List;
import java.util.Locale;

@Getter @Setter
public class CheckRatePage extends BasePage{

    @FindBy(xpath = "//input[@name='desiredAmount']")
    private WebElement loanAmountField;

    @FindBy(xpath = "//select[@data-auto='dropLoanPurpose']")
    private WebElement loanPurposeDropdown;

    @FindBy(xpath = "//button[@type='submit']")
    private WebElement submitButton;

    @FindBy(xpath = "//a[text()='No thanks, I would like to continue with Upgrade']")
    private WebElement message;

    @FindBy(xpath = "//input[@data-auto='borrowerFirstName']")
    private WebElement firstNameField;

    @FindBy(xpath = "//input[@data-auto='borrowerLastName']")
    private WebElement lastNameField;

    @FindBy(xpath = "//input[@data-auto='borrowerStreet']")
    private WebElement streetAddressField;

    @FindBy(xpath = "//b[@class='geosuggest__item__matched-text']")
    private List<WebElement> addressSuggestions;

    @FindBy(xpath = "//input[@data-auto='borrowerCity']")
    private WebElement cityNameField;

    @FindBy(xpath = "//input[@data-auto='borrowerState']")
    private WebElement stateNameField;

    @FindBy(xpath = "//input[@data-auto='borrowerZipCode']")
    private WebElement zipCodeField;

    @FindBy(xpath = "//input[@data-auto='borrowerDateOfBirth']")
    private WebElement DOBField;

    @FindBy(xpath = "//input[@data-auto='borrowerIncome']")
    private WebElement borrowerIncomeField;

    @FindBy(xpath = "//input[@data-auto='borrowerAdditionalIncome']")
    private WebElement borrowerAdditionalIncome;

    @FindBy(xpath = "//input[@autocomplete='email']")
    private WebElement emailField;

    @FindBy(xpath = "//input[@autocomplete='new-password']")
    private WebElement newPasswordField;

    @FindBy(xpath = "//input[@autocomplete='current-password']")
    private WebElement currentPasswordField;

    @FindBy(xpath = "//input[@type='checkbox']/following::div[1]")
    private WebElement consentCheckbox;

    @FindBy(xpath = "//h1[text()='Great news, here are your offers!']")
    private WebElement offerMessage;

    @FindBy(xpath = "//span[@data-auto='userLoanAmount']")
    private WebElement offeredLoanAmount;

    @FindBy(xpath = "//span[@data-auto='defaultMonthlyPayment']")
    private WebElement offeredMonthlyPayment;

    @FindBy(xpath = "//div[@data-auto='defaultLoanTerm']")
    private WebElement offeredLoanTerm;

    @FindBy(xpath = "//div[@data-auto='defaultLoanInterestRate']")
    private WebElement offeredInterestRate;

    @FindBy(xpath = "//div[@data-auto='defaultMoreInfoAPR']")
    private WebElement offeredAPR;

    @FindBy(xpath = "//label[@aria-label='Open Site Menu']")
    private WebElement menuButton;

    @FindBy(xpath = "//a[text()='Sign Out']")
    private WebElement signOut;

    @FindBy(xpath = "//h1[@data-auto='logoutMessage']")
    private WebElement logOutSuccessMessage;

    Locale locale = new Locale("en-US"); // It will generate US specific data.
    Faker faker = new Faker(locale);
    public String firstName = faker.name().firstName();
    public String lastName =faker.name().lastName();
    /**
     * Ideally below random variables generated by faker should be used for adding address of the user.
     *
     * public String streetAddress =faker.address().streetName();
     * public String city =faker.address().cityName();
     * public String state =faker.address().stateAbbr();
     *
     * But during testing with some faker variable I found out that sometimes test was failing because
     * there are different policies for certain states.
     * For example in some states there is a limit for loan amount. Since I am not familiar with all
     * details of application I kept the street, city, state details fixed.
     * In real framework i would put conditions for certain states and still use fakers without any issue
     */

    public String city ="Brooklyn";
    public String state ="NY";
    public String streetAddress ="Rogers Avenue";
    public String zipCode =faker.number().digits(5);
    public int DOBMonth =faker.number().numberBetween(01, 12);
    public int DOBDay =faker.number().numberBetween(01,28);
    public int DOBYear =faker.number().numberBetween(1930,2000);
    public int annualIncome=faker.number().numberBetween(120000, 200000);
    public int additionalIncome= faker.number().numberBetween(5000, 10000);
    public String email =faker.name().firstName()+faker.number().digits(1)+"@upgrade-challenge.com";
    public String password = CustomMethods.generatePassword();


    public CheckRatePage(){
        PageFactory.initElements(Driver.getDriver(), this);
    }



}
